// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package github

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// GetRepositoryStatsResponse is returned by GetRepositoryStats on success.
type GetRepositoryStatsResponse struct {
	// The currently authenticated user.
	Viewer GetRepositoryStatsViewerUser `json:"viewer"`
}

// GetViewer returns GetRepositoryStatsResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsResponse) GetViewer() GetRepositoryStatsViewerUser { return v.Viewer }

// GetRepositoryStatsViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetRepositoryStatsViewerUser struct {
	// A list of repositories that the user owns.
	Repositories GetRepositoryStatsViewerUserRepositoriesRepositoryConnection `json:"repositories"`
}

// GetRepositories returns GetRepositoryStatsViewerUser.Repositories, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUser) GetRepositories() GetRepositoryStatsViewerUserRepositoriesRepositoryConnection {
	return v.Repositories
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnection struct {
	// Information to aid in pagination.
	PageInfo GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepository `json:"nodes"`
}

// GetPageInfo returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnection) GetPageInfo() GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnection) GetNodes() []GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepository {
	return v.Nodes
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepository struct {
	// The Ref associated with the repository's default branch.
	DefaultBranchRef GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef `json:"defaultBranchRef"`
	// A list containing a breakdown of the language composition of the repository.
	Languages GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection `json:"languages"`
}

// GetDefaultBranchRef returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepository.DefaultBranchRef, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepository) GetDefaultBranchRef() GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef {
	return v.DefaultBranchRef
}

// GetLanguages returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepository.Languages, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepository) GetLanguages() GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection {
	return v.Languages
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef struct {
	// The object the ref points to. Returns null when object does not exist.
	Target GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject `json:"-"`
}

// GetTarget returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef.Target, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef) GetTarget() GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject {
	return v.Target
}

func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef
		Target json.RawMessage `json:"target"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Target
		src := firstPass.Target
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef.Target: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef struct {
	Target json.RawMessage `json:"target"`
}

func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef) __premarshalJSON() (*__premarshalGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef, error) {
	var retval __premarshalGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef

	{

		dst := &retval.Target
		src := v.Target
		var err error
		*dst, err = __marshalGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef.Target: %w", err)
		}
	}
	return &retval, nil
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob includes the requested fields of the GraphQL type Blob.
// The GraphQL type's documentation follows.
//
// Represents a Git blob.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob.Typename, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob) GetTypename() string {
	return v.Typename
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit struct {
	Typename string `json:"__typename"`
	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
	History GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection `json:"history"`
}

// GetTypename returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit.Typename, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit) GetTypename() string {
	return v.Typename
}

// GetHistory returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit.History, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit) GetHistory() GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection {
	return v.History
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection includes the requested fields of the GraphQL type CommitHistoryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Commit.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection struct {
	// A list of nodes.
	Nodes []GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit `json:"nodes"`
}

// GetNodes returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection) GetNodes() []GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit {
	return v.Nodes
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit struct {
	// The datetime when this commit was committed.
	CommittedDate time.Time `json:"committedDate"`
}

// GetCommittedDate returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit.CommittedDate, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit) GetCommittedDate() time.Time {
	return v.CommittedDate
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject includes the requested fields of the GraphQL interface GitObject.
//
// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject is implemented by the following types:
// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob
// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit
// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag
// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject interface {
	implementsGraphQLInterfaceGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob) implementsGraphQLInterfaceGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject() {
}
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit) implementsGraphQLInterfaceGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject() {
}
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag) implementsGraphQLInterfaceGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject() {
}
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree) implementsGraphQLInterfaceGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject() {
}

func __unmarshalGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject(b []byte, v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Blob":
		*v = new(GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GitObject.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject: "%v"`, tn.TypeName)
	}
}

func __marshalGetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject(v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob
		}{typename, v}
		return json.Marshal(result)
	case *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit
		}{typename, v}
		return json.Marshal(result)
	case *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag
		}{typename, v}
		return json.Marshal(result)
	case *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject: "%T"`, v)
	}
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Represents a Git tag.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag.Typename, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag) GetTypename() string {
	return v.Typename
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree includes the requested fields of the GraphQL type Tree.
// The GraphQL type's documentation follows.
//
// Represents a Git tree.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree.Typename, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree) GetTypename() string {
	return v.Typename
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection includes the requested fields of the GraphQL type LanguageConnection.
// The GraphQL type's documentation follows.
//
// A list of languages associated with the parent.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection struct {
	// A list of edges.
	Edges []GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge `json:"edges"`
}

// GetEdges returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection) GetEdges() []GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge {
	return v.Edges
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge includes the requested fields of the GraphQL type LanguageEdge.
// The GraphQL type's documentation follows.
//
// Represents the language of a repository.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge struct {
	// The number of bytes of code written in the language.
	Size int                                                                                                                                 `json:"size"`
	Node GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage `json:"node"`
}

// GetSize returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge.Size, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge) GetSize() int {
	return v.Size
}

// GetNode returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge.Node, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge) GetNode() GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage {
	return v.Node
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage includes the requested fields of the GraphQL type Language.
// The GraphQL type's documentation follows.
//
// Represents a given language found in repositories.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage struct {
	// The name of the current language.
	Name string `json:"name"`
}

// GetName returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage.Name, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage) GetName() string {
	return v.Name
}

// GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetRepositoryStatsViewerUserRepositoriesRepositoryConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// __GetRepositoryStatsInput is used internally by genqlient
type __GetRepositoryStatsInput struct {
	Cursor string `json:"cursor"`
}

// GetCursor returns __GetRepositoryStatsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetRepositoryStatsInput) GetCursor() string { return v.Cursor }

// The query or mutation executed by GetRepositoryStats.
const GetRepositoryStats_Operation = `
query GetRepositoryStats ($cursor: String) {
	viewer {
		repositories(first: 10, after: $cursor, isFork: false, affiliations: [OWNER]) {
			pageInfo {
				endCursor
				hasNextPage
			}
			nodes {
				defaultBranchRef {
					target {
						__typename
						... on Commit {
							history(first: 100) {
								nodes {
									committedDate
								}
							}
						}
					}
				}
				languages(first: 100, orderBy: {field:SIZE,direction:DESC}) {
					edges {
						size
						node {
							name
						}
					}
				}
			}
		}
	}
}
`

func GetRepositoryStats(
	ctx_ context.Context,
	client_ graphql.Client,
	cursor string,
) (*GetRepositoryStatsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetRepositoryStats",
		Query:  GetRepositoryStats_Operation,
		Variables: &__GetRepositoryStatsInput{
			Cursor: cursor,
		},
	}
	var err_ error

	var data_ GetRepositoryStatsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
