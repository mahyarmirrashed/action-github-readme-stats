// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package github

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// GetCommitsResponse is returned by GetCommits on success.
type GetCommitsResponse struct {
	// The currently authenticated user.
	Viewer GetCommitsViewerUser `json:"viewer"`
}

// GetViewer returns GetCommitsResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetCommitsResponse) GetViewer() GetCommitsViewerUser { return v.Viewer }

// GetCommitsViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetCommitsViewerUser struct {
	// Find Repository.
	Repository GetCommitsViewerUserRepository `json:"repository"`
}

// GetRepository returns GetCommitsViewerUser.Repository, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUser) GetRepository() GetCommitsViewerUserRepository { return v.Repository }

// GetCommitsViewerUserRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetCommitsViewerUserRepository struct {
	// The Ref associated with the repository's default branch.
	DefaultBranchRef GetCommitsViewerUserRepositoryDefaultBranchRef `json:"defaultBranchRef"`
}

// GetDefaultBranchRef returns GetCommitsViewerUserRepository.DefaultBranchRef, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepository) GetDefaultBranchRef() GetCommitsViewerUserRepositoryDefaultBranchRef {
	return v.DefaultBranchRef
}

// GetCommitsViewerUserRepositoryDefaultBranchRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type GetCommitsViewerUserRepositoryDefaultBranchRef struct {
	// The object the ref points to. Returns null when object does not exist.
	Target GetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject `json:"-"`
}

// GetTarget returns GetCommitsViewerUserRepositoryDefaultBranchRef.Target, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRef) GetTarget() GetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject {
	return v.Target
}

func (v *GetCommitsViewerUserRepositoryDefaultBranchRef) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetCommitsViewerUserRepositoryDefaultBranchRef
		Target json.RawMessage `json:"target"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetCommitsViewerUserRepositoryDefaultBranchRef = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Target
		src := firstPass.Target
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetCommitsViewerUserRepositoryDefaultBranchRef.Target: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetCommitsViewerUserRepositoryDefaultBranchRef struct {
	Target json.RawMessage `json:"target"`
}

func (v *GetCommitsViewerUserRepositoryDefaultBranchRef) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetCommitsViewerUserRepositoryDefaultBranchRef) __premarshalJSON() (*__premarshalGetCommitsViewerUserRepositoryDefaultBranchRef, error) {
	var retval __premarshalGetCommitsViewerUserRepositoryDefaultBranchRef

	{

		dst := &retval.Target
		src := v.Target
		var err error
		*dst, err = __marshalGetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetCommitsViewerUserRepositoryDefaultBranchRef.Target: %w", err)
		}
	}
	return &retval, nil
}

// GetCommitsViewerUserRepositoryDefaultBranchRefTargetBlob includes the requested fields of the GraphQL type Blob.
// The GraphQL type's documentation follows.
//
// Represents a Git blob.
type GetCommitsViewerUserRepositoryDefaultBranchRefTargetBlob struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetBlob.Typename, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetBlob) GetTypename() string {
	return v.Typename
}

// GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit struct {
	Typename string `json:"__typename"`
	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
	History GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection `json:"history"`
}

// GetTypename returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit.Typename, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit) GetTypename() string {
	return v.Typename
}

// GetHistory returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit.History, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit) GetHistory() GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection {
	return v.History
}

// GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection includes the requested fields of the GraphQL type CommitHistoryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Commit.
type GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection struct {
	// Information to aid in pagination.
	PageInfo GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit `json:"nodes"`
}

// GetPageInfo returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection) GetPageInfo() GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection) GetNodes() []GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit {
	return v.Nodes
}

// GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit struct {
	// The datetime when this commit was committed.
	CommittedDate time.Time `json:"committedDate"`
}

// GetCommittedDate returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit.CommittedDate, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit) GetCommittedDate() time.Time {
	return v.CommittedDate
}

// GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject includes the requested fields of the GraphQL interface GitObject.
//
// GetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject is implemented by the following types:
// GetCommitsViewerUserRepositoryDefaultBranchRefTargetBlob
// GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit
// GetCommitsViewerUserRepositoryDefaultBranchRefTargetTag
// GetCommitsViewerUserRepositoryDefaultBranchRefTargetTree
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type GetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject interface {
	implementsGraphQLInterfaceGetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetBlob) implementsGraphQLInterfaceGetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject() {
}
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit) implementsGraphQLInterfaceGetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject() {
}
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetTag) implementsGraphQLInterfaceGetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject() {
}
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetTree) implementsGraphQLInterfaceGetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject() {
}

func __unmarshalGetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject(b []byte, v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Blob":
		*v = new(GetCommitsViewerUserRepositoryDefaultBranchRefTargetBlob)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(GetCommitsViewerUserRepositoryDefaultBranchRefTargetTag)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(GetCommitsViewerUserRepositoryDefaultBranchRefTargetTree)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GitObject.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject: "%v"`, tn.TypeName)
	}
}

func __marshalGetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject(v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetCommitsViewerUserRepositoryDefaultBranchRefTargetBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCommitsViewerUserRepositoryDefaultBranchRefTargetBlob
		}{typename, v}
		return json.Marshal(result)
	case *GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCommitsViewerUserRepositoryDefaultBranchRefTargetCommit
		}{typename, v}
		return json.Marshal(result)
	case *GetCommitsViewerUserRepositoryDefaultBranchRefTargetTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCommitsViewerUserRepositoryDefaultBranchRefTargetTag
		}{typename, v}
		return json.Marshal(result)
	case *GetCommitsViewerUserRepositoryDefaultBranchRefTargetTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCommitsViewerUserRepositoryDefaultBranchRefTargetTree
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetCommitsViewerUserRepositoryDefaultBranchRefTargetGitObject: "%T"`, v)
	}
}

// GetCommitsViewerUserRepositoryDefaultBranchRefTargetTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Represents a Git tag.
type GetCommitsViewerUserRepositoryDefaultBranchRefTargetTag struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetTag.Typename, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetTag) GetTypename() string {
	return v.Typename
}

// GetCommitsViewerUserRepositoryDefaultBranchRefTargetTree includes the requested fields of the GraphQL type Tree.
// The GraphQL type's documentation follows.
//
// Represents a Git tree.
type GetCommitsViewerUserRepositoryDefaultBranchRefTargetTree struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetCommitsViewerUserRepositoryDefaultBranchRefTargetTree.Typename, and is useful for accessing the field via an interface.
func (v *GetCommitsViewerUserRepositoryDefaultBranchRefTargetTree) GetTypename() string {
	return v.Typename
}

// GetLanguagesResponse is returned by GetLanguages on success.
type GetLanguagesResponse struct {
	// The currently authenticated user.
	Viewer GetLanguagesViewerUser `json:"viewer"`
}

// GetViewer returns GetLanguagesResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetLanguagesResponse) GetViewer() GetLanguagesViewerUser { return v.Viewer }

// GetLanguagesViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetLanguagesViewerUser struct {
	// Find Repository.
	Repository GetLanguagesViewerUserRepository `json:"repository"`
}

// GetRepository returns GetLanguagesViewerUser.Repository, and is useful for accessing the field via an interface.
func (v *GetLanguagesViewerUser) GetRepository() GetLanguagesViewerUserRepository {
	return v.Repository
}

// GetLanguagesViewerUserRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetLanguagesViewerUserRepository struct {
	// A list containing a breakdown of the language composition of the repository.
	Languages GetLanguagesViewerUserRepositoryLanguagesLanguageConnection `json:"languages"`
}

// GetLanguages returns GetLanguagesViewerUserRepository.Languages, and is useful for accessing the field via an interface.
func (v *GetLanguagesViewerUserRepository) GetLanguages() GetLanguagesViewerUserRepositoryLanguagesLanguageConnection {
	return v.Languages
}

// GetLanguagesViewerUserRepositoryLanguagesLanguageConnection includes the requested fields of the GraphQL type LanguageConnection.
// The GraphQL type's documentation follows.
//
// A list of languages associated with the parent.
type GetLanguagesViewerUserRepositoryLanguagesLanguageConnection struct {
	// A list of edges.
	Edges []GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdge `json:"edges"`
}

// GetEdges returns GetLanguagesViewerUserRepositoryLanguagesLanguageConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetLanguagesViewerUserRepositoryLanguagesLanguageConnection) GetEdges() []GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdge {
	return v.Edges
}

// GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdge includes the requested fields of the GraphQL type LanguageEdge.
// The GraphQL type's documentation follows.
//
// Represents the language of a repository.
type GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdge struct {
	// The number of bytes of code written in the language.
	Size int                                                                                      `json:"size"`
	Node GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage `json:"node"`
}

// GetSize returns GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdge.Size, and is useful for accessing the field via an interface.
func (v *GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdge) GetSize() int {
	return v.Size
}

// GetNode returns GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdge.Node, and is useful for accessing the field via an interface.
func (v *GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdge) GetNode() GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage {
	return v.Node
}

// GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage includes the requested fields of the GraphQL type Language.
// The GraphQL type's documentation follows.
//
// Represents a given language found in repositories.
type GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage struct {
	// The name of the current language.
	Name string `json:"name"`
}

// GetName returns GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage.Name, and is useful for accessing the field via an interface.
func (v *GetLanguagesViewerUserRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage) GetName() string {
	return v.Name
}

// GetRepositoriesResponse is returned by GetRepositories on success.
type GetRepositoriesResponse struct {
	// The currently authenticated user.
	Viewer GetRepositoriesViewerUser `json:"viewer"`
}

// GetViewer returns GetRepositoriesResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetRepositoriesResponse) GetViewer() GetRepositoriesViewerUser { return v.Viewer }

// GetRepositoriesViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetRepositoriesViewerUser struct {
	// A list of repositories that the user owns.
	Repositories GetRepositoriesViewerUserRepositoriesRepositoryConnection `json:"repositories"`
}

// GetRepositories returns GetRepositoriesViewerUser.Repositories, and is useful for accessing the field via an interface.
func (v *GetRepositoriesViewerUser) GetRepositories() GetRepositoriesViewerUserRepositoriesRepositoryConnection {
	return v.Repositories
}

// GetRepositoriesViewerUserRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type GetRepositoriesViewerUserRepositoriesRepositoryConnection struct {
	// Information to aid in pagination.
	PageInfo GetRepositoriesViewerUserRepositoriesRepositoryConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetRepositoriesViewerUserRepositoriesRepositoryConnectionNodesRepository `json:"nodes"`
}

// GetPageInfo returns GetRepositoriesViewerUserRepositoriesRepositoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetRepositoriesViewerUserRepositoriesRepositoryConnection) GetPageInfo() GetRepositoriesViewerUserRepositoriesRepositoryConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetRepositoriesViewerUserRepositoriesRepositoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetRepositoriesViewerUserRepositoriesRepositoryConnection) GetNodes() []GetRepositoriesViewerUserRepositoriesRepositoryConnectionNodesRepository {
	return v.Nodes
}

// GetRepositoriesViewerUserRepositoriesRepositoryConnectionNodesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetRepositoriesViewerUserRepositoriesRepositoryConnectionNodesRepository struct {
	// Returns whether or not this repository is empty.
	IsEmpty bool `json:"isEmpty"`
	// The name of the repository.
	Name string `json:"name"`
}

// GetIsEmpty returns GetRepositoriesViewerUserRepositoriesRepositoryConnectionNodesRepository.IsEmpty, and is useful for accessing the field via an interface.
func (v *GetRepositoriesViewerUserRepositoriesRepositoryConnectionNodesRepository) GetIsEmpty() bool {
	return v.IsEmpty
}

// GetName returns GetRepositoriesViewerUserRepositoriesRepositoryConnectionNodesRepository.Name, and is useful for accessing the field via an interface.
func (v *GetRepositoriesViewerUserRepositoriesRepositoryConnectionNodesRepository) GetName() string {
	return v.Name
}

// GetRepositoriesViewerUserRepositoriesRepositoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetRepositoriesViewerUserRepositoriesRepositoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns GetRepositoriesViewerUserRepositoriesRepositoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetRepositoriesViewerUserRepositoriesRepositoryConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns GetRepositoriesViewerUserRepositoriesRepositoryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetRepositoriesViewerUserRepositoriesRepositoryConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// __GetCommitsInput is used internally by genqlient
type __GetCommitsInput struct {
	Repository string  `json:"repository"`
	Cursor     *string `json:"cursor"`
}

// GetRepository returns __GetCommitsInput.Repository, and is useful for accessing the field via an interface.
func (v *__GetCommitsInput) GetRepository() string { return v.Repository }

// GetCursor returns __GetCommitsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetCommitsInput) GetCursor() *string { return v.Cursor }

// __GetLanguagesInput is used internally by genqlient
type __GetLanguagesInput struct {
	Repository string `json:"repository"`
}

// GetRepository returns __GetLanguagesInput.Repository, and is useful for accessing the field via an interface.
func (v *__GetLanguagesInput) GetRepository() string { return v.Repository }

// __GetRepositoriesInput is used internally by genqlient
type __GetRepositoriesInput struct {
	Cursor string `json:"cursor"`
}

// GetCursor returns __GetRepositoriesInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetRepositoriesInput) GetCursor() string { return v.Cursor }

// The query or mutation executed by GetCommits.
const GetCommits_Operation = `
query GetCommits ($repository: String!, $cursor: String) {
	viewer {
		repository(name: $repository) {
			defaultBranchRef {
				target {
					__typename
					... on Commit {
						history(after: $cursor) {
							pageInfo {
								endCursor
								hasNextPage
							}
							nodes {
								committedDate
							}
						}
					}
				}
			}
		}
	}
}
`

func GetCommits(
	ctx_ context.Context,
	client_ graphql.Client,
	repository string,
	cursor *string,
) (*GetCommitsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCommits",
		Query:  GetCommits_Operation,
		Variables: &__GetCommitsInput{
			Repository: repository,
			Cursor:     cursor,
		},
	}
	var err_ error

	var data_ GetCommitsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetLanguages.
const GetLanguages_Operation = `
query GetLanguages ($repository: String!) {
	viewer {
		repository(name: $repository) {
			languages(first: 100, orderBy: {field:SIZE,direction:DESC}) {
				edges {
					size
					node {
						name
					}
				}
			}
		}
	}
}
`

func GetLanguages(
	ctx_ context.Context,
	client_ graphql.Client,
	repository string,
) (*GetLanguagesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetLanguages",
		Query:  GetLanguages_Operation,
		Variables: &__GetLanguagesInput{
			Repository: repository,
		},
	}
	var err_ error

	var data_ GetLanguagesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetRepositories.
const GetRepositories_Operation = `
query GetRepositories ($cursor: String) {
	viewer {
		repositories(first: 10, after: $cursor, isFork: false, affiliations: [OWNER]) {
			pageInfo {
				endCursor
				hasNextPage
			}
			nodes {
				isEmpty
				name
			}
		}
	}
}
`

func GetRepositories(
	ctx_ context.Context,
	client_ graphql.Client,
	cursor string,
) (*GetRepositoriesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetRepositories",
		Query:  GetRepositories_Operation,
		Variables: &__GetRepositoriesInput{
			Cursor: cursor,
		},
	}
	var err_ error

	var data_ GetRepositoriesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
