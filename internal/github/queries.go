// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package github

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// __getCommitHistoryInput is used internally by genqlient
type __getCommitHistoryInput struct {
	Owner string `json:"owner"`
	Name  string `json:"name"`
	Id    string `json:"id"`
}

// GetOwner returns __getCommitHistoryInput.Owner, and is useful for accessing the field via an interface.
func (v *__getCommitHistoryInput) GetOwner() string { return v.Owner }

// GetName returns __getCommitHistoryInput.Name, and is useful for accessing the field via an interface.
func (v *__getCommitHistoryInput) GetName() string { return v.Name }

// GetId returns __getCommitHistoryInput.Id, and is useful for accessing the field via an interface.
func (v *__getCommitHistoryInput) GetId() string { return v.Id }

// __getContributedReposInput is used internally by genqlient
type __getContributedReposInput struct {
	Username string `json:"username"`
}

// GetUsername returns __getContributedReposInput.Username, and is useful for accessing the field via an interface.
func (v *__getContributedReposInput) GetUsername() string { return v.Username }

// getCommitHistoryRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getCommitHistoryRepository struct {
	// Fetch a list of refs from the repository
	Refs getCommitHistoryRepositoryRefsRefConnection `json:"refs"`
}

// GetRefs returns getCommitHistoryRepository.Refs, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepository) GetRefs() getCommitHistoryRepositoryRefsRefConnection {
	return v.Refs
}

// getCommitHistoryRepositoryRefsRefConnection includes the requested fields of the GraphQL type RefConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Ref.
type getCommitHistoryRepositoryRefsRefConnection struct {
	// A list of edges.
	Edges []getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge `json:"edges"`
}

// GetEdges returns getCommitHistoryRepositoryRefsRefConnection.Edges, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnection) GetEdges() []getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge {
	return v.Edges
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge includes the requested fields of the GraphQL type RefEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge struct {
	// The item at the end of the edge.
	Node getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef `json:"node"`
}

// GetNode returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge.Node, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge) GetNode() getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef {
	return v.Node
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef struct {
	// The ref name.
	Name string `json:"name"`
	// The object the ref points to. Returns null when object does not exist.
	Target getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject `json:"-"`
}

// GetName returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef.Name, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) GetName() string {
	return v.Name
}

// GetTarget returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef.Target, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) GetTarget() getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject {
	return v.Target
}

func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef
		Target json.RawMessage `json:"target"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Target
		src := firstPass.Target
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef.Target: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef struct {
	Name string `json:"name"`

	Target json.RawMessage `json:"target"`
}

func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) __premarshalJSON() (*__premarshalgetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef, error) {
	var retval __premarshalgetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef

	retval.Name = v.Name
	{

		dst := &retval.Target
		src := v.Target
		var err error
		*dst, err = __marshalgetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef.Target: %w", err)
		}
	}
	return &retval, nil
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob includes the requested fields of the GraphQL type Blob.
// The GraphQL type's documentation follows.
//
// Represents a Git blob.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob.Typename, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob) GetTypename() string {
	return v.Typename
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit struct {
	Typename string `json:"__typename"`
	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
	History getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection `json:"history"`
}

// GetTypename returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit.Typename, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit) GetTypename() string {
	return v.Typename
}

// GetHistory returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit.History, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit) GetHistory() getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection {
	return v.History
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection includes the requested fields of the GraphQL type CommitHistoryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Commit.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection struct {
	// A list of edges.
	Edges []getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge `json:"edges"`
}

// GetEdges returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection) GetEdges() []getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge {
	return v.Edges
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge includes the requested fields of the GraphQL type CommitEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge struct {
	// The item at the end of the edge.
	Node getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit `json:"node"`
}

// GetNode returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge.Node, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge) GetNode() getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit {
	return v.Node
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit struct {
	// The datetime when this commit was committed.
	CommittedDate time.Time `json:"committedDate"`
}

// GetCommittedDate returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit.CommittedDate, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit) GetCommittedDate() time.Time {
	return v.CommittedDate
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject includes the requested fields of the GraphQL interface GitObject.
//
// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject is implemented by the following types:
// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob
// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit
// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag
// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject interface {
	implementsGraphQLInterfacegetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob) implementsGraphQLInterfacegetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject() {
}
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit) implementsGraphQLInterfacegetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject() {
}
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag) implementsGraphQLInterfacegetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject() {
}
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree) implementsGraphQLInterfacegetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject() {
}

func __unmarshalgetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject(b []byte, v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Blob":
		*v = new(getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GitObject.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject: "%v"`, tn.TypeName)
	}
}

func __marshalgetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject(v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob
		}{typename, v}
		return json.Marshal(result)
	case *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit
		}{typename, v}
		return json.Marshal(result)
	case *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag
		}{typename, v}
		return json.Marshal(result)
	case *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject: "%T"`, v)
	}
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Represents a Git tag.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag.Typename, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag) GetTypename() string {
	return v.Typename
}

// getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree includes the requested fields of the GraphQL type Tree.
// The GraphQL type's documentation follows.
//
// Represents a Git tree.
type getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree.Typename, and is useful for accessing the field via an interface.
func (v *getCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree) GetTypename() string {
	return v.Typename
}

// getCommitHistoryResponse is returned by getCommitHistory on success.
type getCommitHistoryResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository getCommitHistoryRepository `json:"repository"`
}

// GetRepository returns getCommitHistoryResponse.Repository, and is useful for accessing the field via an interface.
func (v *getCommitHistoryResponse) GetRepository() getCommitHistoryRepository { return v.Repository }

// getContributedReposResponse is returned by getContributedRepos on success.
type getContributedReposResponse struct {
	// Lookup a user by login.
	User getContributedReposUser `json:"user"`
}

// GetUser returns getContributedReposResponse.User, and is useful for accessing the field via an interface.
func (v *getContributedReposResponse) GetUser() getContributedReposUser { return v.User }

// getContributedReposUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getContributedReposUser struct {
	// A list of repositories that the user recently contributed to.
	RepositoriesContributedTo getContributedReposUserRepositoriesContributedToRepositoryConnection `json:"repositoriesContributedTo"`
}

// GetRepositoriesContributedTo returns getContributedReposUser.RepositoriesContributedTo, and is useful for accessing the field via an interface.
func (v *getContributedReposUser) GetRepositoriesContributedTo() getContributedReposUserRepositoriesContributedToRepositoryConnection {
	return v.RepositoriesContributedTo
}

// getContributedReposUserRepositoriesContributedToRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type getContributedReposUserRepositoriesContributedToRepositoryConnection struct {
	// A list of nodes.
	Nodes []getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository `json:"nodes"`
}

// GetNodes returns getContributedReposUserRepositoriesContributedToRepositoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getContributedReposUserRepositoriesContributedToRepositoryConnection) GetNodes() []getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository {
	return v.Nodes
}

// getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository struct {
	// Identifies if the repository is a fork.
	IsFork bool `json:"isFork"`
	// The name of the repository.
	Name string `json:"name"`
	// The User owner of the repository.
	Owner getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner `json:"-"`
}

// GetIsFork returns getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.IsFork, and is useful for accessing the field via an interface.
func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) GetIsFork() bool {
	return v.IsFork
}

// GetName returns getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.Name, and is useful for accessing the field via an interface.
func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) GetName() string {
	return v.Name
}

// GetOwner returns getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.Owner, and is useful for accessing the field via an interface.
func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) GetOwner() getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner {
	return v.Owner
}

func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository struct {
	IsFork bool `json:"isFork"`

	Name string `json:"name"`

	Owner json.RawMessage `json:"owner"`
}

func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) __premarshalJSON() (*__premarshalgetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository, error) {
	var retval __premarshalgetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository

	retval.IsFork = v.IsFork
	retval.Name = v.Name
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalgetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.Owner: %w", err)
		}
	}
	return &retval, nil
}

// getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner includes the requested fields of the GraphQL interface RepositoryOwner.
//
// getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner is implemented by the following types:
// getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization
// getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
type getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner interface {
	implementsGraphQLInterfacegetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetLogin returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username used to login.
	GetLogin() string
}

func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization) implementsGraphQLInterfacegetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner() {
}
func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser) implementsGraphQLInterfacegetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner() {
}

func __unmarshalgetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner(b []byte, v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Organization":
		*v = new(getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RepositoryOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner: "%v"`, tn.TypeName)
	}
}

func __marshalgetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner(v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization
		}{typename, v}
		return json.Marshal(result)
	case *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner: "%T"`, v)
	}
}

// getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization struct {
	Typename string `json:"__typename"`
	// The username used to login.
	Login string `json:"login"`
}

// GetTypename returns getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization.Typename, and is useful for accessing the field via an interface.
func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization) GetTypename() string {
	return v.Typename
}

// GetLogin returns getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization.Login, and is useful for accessing the field via an interface.
func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization) GetLogin() string {
	return v.Login
}

// getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser struct {
	Typename string `json:"__typename"`
	// The username used to login.
	Login string `json:"login"`
}

// GetTypename returns getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser.Typename, and is useful for accessing the field via an interface.
func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser) GetTypename() string {
	return v.Typename
}

// GetLogin returns getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *getContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser) GetLogin() string {
	return v.Login
}

// getUserInfoResponse is returned by getUserInfo on success.
type getUserInfoResponse struct {
	// The currently authenticated user.
	Viewer getUserInfoViewerUser `json:"viewer"`
}

// GetViewer returns getUserInfoResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getUserInfoResponse) GetViewer() getUserInfoViewerUser { return v.Viewer }

// getUserInfoViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getUserInfoViewerUser struct {
	// The username used to login.
	Login string `json:"login"`
	// The Node ID of the User object
	Id string `json:"id"`
}

// GetLogin returns getUserInfoViewerUser.Login, and is useful for accessing the field via an interface.
func (v *getUserInfoViewerUser) GetLogin() string { return v.Login }

// GetId returns getUserInfoViewerUser.Id, and is useful for accessing the field via an interface.
func (v *getUserInfoViewerUser) GetId() string { return v.Id }

// The query or mutation executed by getCommitHistory.
const getCommitHistory_Operation = `
query getCommitHistory ($owner: String!, $name: String!, $id: ID!) {
	repository(owner: $owner, name: $name) {
		refs(refPrefix: "refs/heads/", query: "master main", first: 2) {
			edges {
				node {
					name
					target {
						__typename
						... on Commit {
							history(first: 100, author: {id:$id}) {
								edges {
									node {
										committedDate
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func getCommitHistory(
	ctx_ context.Context,
	client_ graphql.Client,
	owner string,
	name string,
	id string,
) (*getCommitHistoryResponse, error) {
	req_ := &graphql.Request{
		OpName: "getCommitHistory",
		Query:  getCommitHistory_Operation,
		Variables: &__getCommitHistoryInput{
			Owner: owner,
			Name:  name,
			Id:    id,
		},
	}
	var err_ error

	var data_ getCommitHistoryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getContributedRepos.
const getContributedRepos_Operation = `
query getContributedRepos ($username: String!) {
	user(login: $username) {
		repositoriesContributedTo(last: 100, includeUserRepositories: true) {
			nodes {
				isFork
				name
				owner {
					__typename
					login
				}
			}
		}
	}
}
`

func getContributedRepos(
	ctx_ context.Context,
	client_ graphql.Client,
	username string,
) (*getContributedReposResponse, error) {
	req_ := &graphql.Request{
		OpName: "getContributedRepos",
		Query:  getContributedRepos_Operation,
		Variables: &__getContributedReposInput{
			Username: username,
		},
	}
	var err_ error

	var data_ getContributedReposResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getUserInfo.
const getUserInfo_Operation = `
query getUserInfo {
	viewer {
		login
		id
	}
}
`

func getUserInfo(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getUserInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUserInfo",
		Query:  getUserInfo_Operation,
	}
	var err_ error

	var data_ getUserInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
