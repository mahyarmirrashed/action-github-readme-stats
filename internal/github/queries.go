// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package github

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// GetCommitHistoryRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetCommitHistoryRepository struct {
	// Fetch a list of refs from the repository
	Refs GetCommitHistoryRepositoryRefsRefConnection `json:"refs"`
}

// GetRefs returns GetCommitHistoryRepository.Refs, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepository) GetRefs() GetCommitHistoryRepositoryRefsRefConnection {
	return v.Refs
}

// GetCommitHistoryRepositoryRefsRefConnection includes the requested fields of the GraphQL type RefConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Ref.
type GetCommitHistoryRepositoryRefsRefConnection struct {
	// A list of edges.
	Edges []GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge `json:"edges"`
}

// GetEdges returns GetCommitHistoryRepositoryRefsRefConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnection) GetEdges() []GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge {
	return v.Edges
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge includes the requested fields of the GraphQL type RefEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge struct {
	// The item at the end of the edge.
	Node GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef `json:"node"`
}

// GetNode returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge.Node, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdge) GetNode() GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef {
	return v.Node
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef struct {
	// The ref name.
	Name string `json:"name"`
	// The object the ref points to. Returns null when object does not exist.
	Target GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject `json:"-"`
}

// GetName returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef.Name, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) GetName() string {
	return v.Name
}

// GetTarget returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef.Target, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) GetTarget() GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject {
	return v.Target
}

func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef
		Target json.RawMessage `json:"target"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Target
		src := firstPass.Target
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef.Target: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef struct {
	Name string `json:"name"`

	Target json.RawMessage `json:"target"`
}

func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef) __premarshalJSON() (*__premarshalGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef, error) {
	var retval __premarshalGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef

	retval.Name = v.Name
	{

		dst := &retval.Target
		src := v.Target
		var err error
		*dst, err = __marshalGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRef.Target: %w", err)
		}
	}
	return &retval, nil
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob includes the requested fields of the GraphQL type Blob.
// The GraphQL type's documentation follows.
//
// Represents a Git blob.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob.Typename, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob) GetTypename() string {
	return v.Typename
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit struct {
	Typename string `json:"__typename"`
	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
	History GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection `json:"history"`
}

// GetTypename returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit.Typename, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit) GetTypename() string {
	return v.Typename
}

// GetHistory returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit.History, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit) GetHistory() GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection {
	return v.History
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection includes the requested fields of the GraphQL type CommitHistoryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Commit.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection struct {
	// A list of edges.
	Edges []GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge `json:"edges"`
}

// GetEdges returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnection) GetEdges() []GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge {
	return v.Edges
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge includes the requested fields of the GraphQL type CommitEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge struct {
	// The item at the end of the edge.
	Node GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit `json:"node"`
}

// GetNode returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge.Node, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge) GetNode() GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit {
	return v.Node
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit struct {
	// The datetime when this commit was committed.
	CommittedDate time.Time `json:"committedDate"`
}

// GetCommittedDate returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit.CommittedDate, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit) GetCommittedDate() time.Time {
	return v.CommittedDate
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject includes the requested fields of the GraphQL interface GitObject.
//
// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject is implemented by the following types:
// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob
// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit
// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag
// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject interface {
	implementsGraphQLInterfaceGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob) implementsGraphQLInterfaceGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject() {
}
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit) implementsGraphQLInterfaceGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject() {
}
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag) implementsGraphQLInterfaceGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject() {
}
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree) implementsGraphQLInterfaceGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject() {
}

func __unmarshalGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject(b []byte, v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Blob":
		*v = new(GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GitObject.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject: "%v"`, tn.TypeName)
	}
}

func __marshalGetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject(v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetBlob
		}{typename, v}
		return json.Marshal(result)
	case *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetCommit
		}{typename, v}
		return json.Marshal(result)
	case *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag
		}{typename, v}
		return json.Marshal(result)
	case *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetGitObject: "%T"`, v)
	}
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Represents a Git tag.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag.Typename, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTag) GetTypename() string {
	return v.Typename
}

// GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree includes the requested fields of the GraphQL type Tree.
// The GraphQL type's documentation follows.
//
// Represents a Git tree.
type GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree.Typename, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryRepositoryRefsRefConnectionEdgesRefEdgeNodeRefTargetTree) GetTypename() string {
	return v.Typename
}

// GetCommitHistoryResponse is returned by GetCommitHistory on success.
type GetCommitHistoryResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository GetCommitHistoryRepository `json:"repository"`
}

// GetRepository returns GetCommitHistoryResponse.Repository, and is useful for accessing the field via an interface.
func (v *GetCommitHistoryResponse) GetRepository() GetCommitHistoryRepository { return v.Repository }

// GetContributedReposResponse is returned by GetContributedRepos on success.
type GetContributedReposResponse struct {
	// Lookup a user by login.
	User GetContributedReposUser `json:"user"`
}

// GetUser returns GetContributedReposResponse.User, and is useful for accessing the field via an interface.
func (v *GetContributedReposResponse) GetUser() GetContributedReposUser { return v.User }

// GetContributedReposUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetContributedReposUser struct {
	// A list of repositories that the user recently contributed to.
	RepositoriesContributedTo GetContributedReposUserRepositoriesContributedToRepositoryConnection `json:"repositoriesContributedTo"`
}

// GetRepositoriesContributedTo returns GetContributedReposUser.RepositoriesContributedTo, and is useful for accessing the field via an interface.
func (v *GetContributedReposUser) GetRepositoriesContributedTo() GetContributedReposUserRepositoriesContributedToRepositoryConnection {
	return v.RepositoriesContributedTo
}

// GetContributedReposUserRepositoriesContributedToRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type GetContributedReposUserRepositoriesContributedToRepositoryConnection struct {
	// A list of nodes.
	Nodes []GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository `json:"nodes"`
}

// GetNodes returns GetContributedReposUserRepositoriesContributedToRepositoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnection) GetNodes() []GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository {
	return v.Nodes
}

// GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository struct {
	// Identifies if the repository is a fork.
	IsFork bool `json:"isFork"`
	// The name of the repository.
	Name string `json:"name"`
	// The User owner of the repository.
	Owner GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner `json:"-"`
}

// GetIsFork returns GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.IsFork, and is useful for accessing the field via an interface.
func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) GetIsFork() bool {
	return v.IsFork
}

// GetName returns GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.Name, and is useful for accessing the field via an interface.
func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) GetName() string {
	return v.Name
}

// GetOwner returns GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.Owner, and is useful for accessing the field via an interface.
func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) GetOwner() GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner {
	return v.Owner
}

func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository struct {
	IsFork bool `json:"isFork"`

	Name string `json:"name"`

	Owner json.RawMessage `json:"owner"`
}

func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository) __premarshalJSON() (*__premarshalGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository, error) {
	var retval __premarshalGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository

	retval.IsFork = v.IsFork
	retval.Name = v.Name
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepository.Owner: %w", err)
		}
	}
	return &retval, nil
}

// GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner includes the requested fields of the GraphQL interface RepositoryOwner.
//
// GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner is implemented by the following types:
// GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization
// GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
type GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner interface {
	implementsGraphQLInterfaceGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetLogin returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username used to login.
	GetLogin() string
}

func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization) implementsGraphQLInterfaceGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner() {
}
func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser) implementsGraphQLInterfaceGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner() {
}

func __unmarshalGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner(b []byte, v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Organization":
		*v = new(GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RepositoryOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner: "%v"`, tn.TypeName)
	}
}

func __marshalGetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner(v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization
		}{typename, v}
		return json.Marshal(result)
	case *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwner: "%T"`, v)
	}
}

// GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization struct {
	Typename string `json:"__typename"`
	// The username used to login.
	Login string `json:"login"`
}

// GetTypename returns GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization.Typename, and is useful for accessing the field via an interface.
func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization) GetTypename() string {
	return v.Typename
}

// GetLogin returns GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization.Login, and is useful for accessing the field via an interface.
func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerOrganization) GetLogin() string {
	return v.Login
}

// GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser struct {
	Typename string `json:"__typename"`
	// The username used to login.
	Login string `json:"login"`
}

// GetTypename returns GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser.Typename, and is useful for accessing the field via an interface.
func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser) GetTypename() string {
	return v.Typename
}

// GetLogin returns GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *GetContributedReposUserRepositoriesContributedToRepositoryConnectionNodesRepositoryOwnerUser) GetLogin() string {
	return v.Login
}

// GetUserInfoResponse is returned by GetUserInfo on success.
type GetUserInfoResponse struct {
	// The currently authenticated user.
	Viewer GetUserInfoViewerUser `json:"viewer"`
}

// GetViewer returns GetUserInfoResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetUserInfoResponse) GetViewer() GetUserInfoViewerUser { return v.Viewer }

// GetUserInfoViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetUserInfoViewerUser struct {
	// The username used to login.
	Login string `json:"login"`
	// The Node ID of the User object
	Id string `json:"id"`
}

// GetLogin returns GetUserInfoViewerUser.Login, and is useful for accessing the field via an interface.
func (v *GetUserInfoViewerUser) GetLogin() string { return v.Login }

// GetId returns GetUserInfoViewerUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserInfoViewerUser) GetId() string { return v.Id }

// __GetCommitHistoryInput is used internally by genqlient
type __GetCommitHistoryInput struct {
	Owner string `json:"owner"`
	Name  string `json:"name"`
	Id    string `json:"id"`
}

// GetOwner returns __GetCommitHistoryInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetCommitHistoryInput) GetOwner() string { return v.Owner }

// GetName returns __GetCommitHistoryInput.Name, and is useful for accessing the field via an interface.
func (v *__GetCommitHistoryInput) GetName() string { return v.Name }

// GetId returns __GetCommitHistoryInput.Id, and is useful for accessing the field via an interface.
func (v *__GetCommitHistoryInput) GetId() string { return v.Id }

// __GetContributedReposInput is used internally by genqlient
type __GetContributedReposInput struct {
	Username string `json:"username"`
}

// GetUsername returns __GetContributedReposInput.Username, and is useful for accessing the field via an interface.
func (v *__GetContributedReposInput) GetUsername() string { return v.Username }

// The query or mutation executed by GetCommitHistory.
const GetCommitHistory_Operation = `
query GetCommitHistory ($owner: String!, $name: String!, $id: ID!) {
	repository(owner: $owner, name: $name) {
		refs(refPrefix: "refs/heads/", query: "master main", first: 2) {
			edges {
				node {
					name
					target {
						__typename
						... on Commit {
							history(first: 100, author: {id:$id}) {
								edges {
									node {
										committedDate
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func GetCommitHistory(
	ctx_ context.Context,
	client_ graphql.Client,
	owner string,
	name string,
	id string,
) (*GetCommitHistoryResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCommitHistory",
		Query:  GetCommitHistory_Operation,
		Variables: &__GetCommitHistoryInput{
			Owner: owner,
			Name:  name,
			Id:    id,
		},
	}
	var err_ error

	var data_ GetCommitHistoryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetContributedRepos.
const GetContributedRepos_Operation = `
query GetContributedRepos ($username: String!) {
	user(login: $username) {
		repositoriesContributedTo(last: 100, includeUserRepositories: true) {
			nodes {
				isFork
				name
				owner {
					__typename
					login
				}
			}
		}
	}
}
`

func GetContributedRepos(
	ctx_ context.Context,
	client_ graphql.Client,
	username string,
) (*GetContributedReposResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetContributedRepos",
		Query:  GetContributedRepos_Operation,
		Variables: &__GetContributedReposInput{
			Username: username,
		},
	}
	var err_ error

	var data_ GetContributedReposResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetUserInfo.
const GetUserInfo_Operation = `
query GetUserInfo {
	viewer {
		login
		id
	}
}
`

func GetUserInfo(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetUserInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetUserInfo",
		Query:  GetUserInfo_Operation,
	}
	var err_ error

	var data_ GetUserInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
